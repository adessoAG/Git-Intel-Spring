package de.adesso.gitstalker.core.processors;

import de.adesso.gitstalker.core.enums.RequestType;
import de.adesso.gitstalker.core.objects.OrganizationWrapper;
import de.adesso.gitstalker.core.objects.Query;
import de.adesso.gitstalker.core.repositories.OrganizationRepository;
import de.adesso.gitstalker.core.repositories.ProcessingRepository;
import de.adesso.gitstalker.core.repositories.RequestRepository;
import de.adesso.gitstalker.core.requests.RequestManager;
import de.adesso.gitstalker.core.resources.memberID_Resources.Members;
import de.adesso.gitstalker.core.resources.memberID_Resources.Nodes;
import de.adesso.gitstalker.core.resources.memberID_Resources.PageInfo;
import de.adesso.gitstalker.core.resources.memberID_Resources.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Calendar;

@Getter
@Setter
@Service
public class MemberIDProcessor extends ResponseProcessor {

    private RequestRepository requestRepository;
    private OrganizationRepository organizationRepository;
    private ProcessingRepository processingRepository;

    private Query requestQuery;
    private OrganizationWrapper organization;

    private ArrayList<String> memberIDs = new ArrayList<>();

    @Autowired
    public MemberIDProcessor(RequestRepository requestRepository, OrganizationRepository organizationRepository, ProcessingRepository processingRepository) {
        this.requestRepository = requestRepository;
        this.organizationRepository = organizationRepository;
        this.processingRepository = processingRepository;
    }

    /**
     * Performs the complete processing of an answer.
     * @param requestQuery Query to be processed.
     */
    public void processResponse(Query requestQuery) {
        this.requestQuery = requestQuery;
        this.organization = this.organizationRepository.findByOrganizationName(requestQuery.getOrganizationName());
        Data responseData = ((ResponseMemberID) this.requestQuery.getQueryResponse()).getData();
        super.updateRateLimit(responseData.getRateLimit(), requestQuery.getQueryRequestType());

        this.processQueryResponse(responseData.getOrganization().getMembers());
        this.processRequestForRemainingInformation(responseData.getOrganization().getMembers().getPageInfo(), this.requestQuery.getOrganizationName());
        super.doFinishingQueryProcedure(this.requestRepository, this.organizationRepository, this.processingRepository, organization, requestQuery, RequestType.MEMBER_ID);
    }

    /**
     * Creates the subsequent requests if it becomes clear during processing that information is still open in the section.
     * @param pageInfo Contains information required to define whether requests are still outstanding.
     * @param organizationName Organization name for creating the appropriate request
     */
    protected void processRequestForRemainingInformation(PageInfo pageInfo, String organizationName) {
        if (pageInfo.isHasNextPage()) {
            super.generateNextRequests(organizationName, pageInfo.getEndCursor(), RequestType.MEMBER_ID, requestRepository);
        } else {
            this.generateNextRequestsBasedOnMemberIDs(this.memberIDs);
            this.organization.addMemberIDs(this.memberIDs);
            this.memberIDs.clear();
        }
    }

    /**
     * Generates the next requests based on the processed information
     * @param memberIDs MemberIDs generated by the requests
     */
    protected void generateNextRequestsBasedOnMemberIDs(ArrayList<String> memberIDs) {
        if(!memberIDs.isEmpty()){
        for (String memberID : memberIDs) {
            requestRepository.save(new RequestManager()
                    .setOrganizationName(this.requestQuery.getOrganizationName())
                    .setMemberID(memberID)
                    .generateRequest(RequestType.MEMBER));
            requestRepository.save(new RequestManager()
                    .setOrganizationName(this.requestQuery.getOrganizationName())
                    .setMemberID(memberID)
                    .generateRequest(RequestType.CREATED_REPOS_BY_MEMBERS));
            }
        } else {
            organization.addFinishedRequest(RequestType.MEMBER);
            organization.addFinishedRequest(RequestType.CREATED_REPOS_BY_MEMBERS);
            organization.getOrganizationDetail().setInternalRepositoriesCommits(super.generateChartJSData(new ArrayList<>()));
        }

    }

    /**
     * Processes the response from the requests
     * @param members Member information from the requests
     */
    protected void processQueryResponse(Members members) {
        for (Nodes nodes : members.getNodes()) {
            this.memberIDs.add(nodes.getId());
        }
    }
}
